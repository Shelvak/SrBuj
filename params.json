{"name":"Srbuj","tagline":"better unobtrusive javascript request for Rails and Jquery","body":"SrBuj\r\n=\r\n\r\nBetter Unobtrusive JavaScript Request (for Rails and jquery_ujs, twitter/bootstrap modal.js)\r\n\r\nSrBuj comes to cure a common illness in a life of every Rails developer (maybe other kind too):\r\n  - write the same code to rise up a modal\r\n  - render a partial on it.\r\n  - change an element in a view without reload the entire web page\r\n  - replace content of an element (GET)\r\n  - add an element (POST)\r\n  - remove an element (DELETE)\r\n  - replace an specific element (PUT/PATCH)\r\n  - bind a callback to run specific js function.\r\n\r\nevery time, we end up with a lot of code, ugly code, messy code...\r\n\r\nAnd every time we end up doing an old and known .js.rb file, with the same 4 lines... Well enough it's enough!\r\n\r\nThis is the cure...  and comes with a simple treatment too!\r\nSteps:\r\n 1. Bundle the gem\r\n 2. required in your manifest\r\n 3. add the magic data attributes to the element\r\n 4. Enjoy de js-less ! :-)\r\n\r\nThis unobtrusive scripting support file is developed for the Ruby on Rails framework, but is not strictly tied to any specific backend. You can drop this into any application to:\r\n\r\n- get modals out of the box, via js\r\n- make non-GET requests from hyperlinks\r\n- make any submit data asynchronously with Ajax and handle the response in a dry way.\r\n\r\nThese features are achieved by adding certain [\"data\" attributes][data] to your HTML markup. In Rails, they are added by the framework's template helpers.\r\n\r\nRequirements\r\n------------\r\n\r\n- [jQuery 1.7.x or higher](http://jquery.com/);\r\n- [jquery_ujs](https://github.com/rails/jquery-ujs)\r\n- [twitter/bootstrap modal.js plugin](http://twitter.github.com/bootstrap/javascript.html#modals) or any .modal()/.modal('toggle') function attached to the jquery element.\r\n- HTML5 doctype (optional).\r\n\r\nIf you don't use HTML5, adding \"data\" attributes to your HTML4 or XHTML pages might make them fail [W3C markup validation][validator]. However, this shouldn't create any issues for web browsers or other user agents.\r\n\r\nInstallation\r\n------------\r\n\r\nFor automated installation in Rails, use the \"jquery-rails\" gem. Place this in your Gemfile:\r\n\r\n````ruby\r\n  gem 'SrBuj'\r\n````\r\n\r\nAnd run:\r\n\r\n    $ bundle install\r\n\r\nThis next step depends on your version of Rails.\r\n\r\na. For Rails 3.1, add these lines to the top of your app/assets/javascripts/application.js file:\r\n\r\n```javascript\r\n//= require jquery\r\n//= require jquery_ujs\r\n//= require SrBuj\r\n```\r\n\r\nUse and Options\r\n---\r\n  - target( data[target] ):  depending on the type of request(GET/PUT/POST/DELETE) is used to alter the Dom. it represent the element that we want to alter in the view after an succceded request (needed)\r\n  - modal( data[modal] ): if you wish that the response ends up in a modal. value: true|false (default false)\r\n  - error (data[error]): id Element In a form data[error] is the holder in witch de form re renders to show the errors\r\n  - replace(data[replace]):  if you wish to replace de data[target] element with the response content on success. represent the PUT/PATCH action for SrBuj. value: true|false (default false)\r\n  - remove (data[method:delete] && data[target]): if these are combined the success response execute a remove() over the data[target] element.\r\n  - nochange (data[nochange]): do all but don't change the document in any way.\r\n  - callback(data[callback]) = after a successeded request, call this function.\r\n  - data[custom] = just proxy the response to my custom function in callback, nothing more.\r\n  - jqueryselector(data[jqueryselector]): Change the data[target] & data[error] for selectors in jquery and find the element!\r\n\r\nYou can use it with any element available. (links forms tables divs anything).\r\n\r\nExample\r\n=======\r\n\r\nmodal\r\n----\r\nin your view (example with a link and haml)\r\n\r\n````haml\r\n = link_to 'add Element' elements_path, remote: true, data: {target: 'partial-id', modal: true}\r\n\r\n\r\n#partial-id\r\n\r\n````\r\n\r\nin your controller\r\n\r\n```` ruby\r\n  def new\r\n    @element= Element.new\r\n    render partial: 'new', content_type: 'text/html' #=> the content_type stands for telling the js request that everything ends up\r\nfine.\r\n  end\r\n````\r\n\r\nthat's it.\r\n\r\nContributing\r\n------------\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\nCopyright\r\n---------\r\n\r\nCopyright (c) 2013 gagoar. See LICENSE.txt for\r\nfurther details.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}