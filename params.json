{"name":"Srbuj","tagline":"better unobtrusive javascript respond for Rails and Jquery","body":"SrBuj\r\n=\r\n\r\n[![Gem Version](https://badge.fury.io/rb/SrBuj.png)](https://rubygems.org/gems/SrBuj)[![Dependency Status](https://gemnasium.com/gagoar/SrBuj.png)](https://gemnasium.com/gagoar/SrBuj) [![Code Climate](https://codeclimate.com/github/gagoar/SrBuj.png)](https://codeclimate.com/github/gagoar/SrBuj)\r\n\r\nBetter Unobtrusive JavaScript Respond (for Rails and jquery_ujs, twitter/bootstrap modal.js)\r\n\r\nSrBuj comes to cure a common illness in a life of every Rails developer (maybe other kind too):\r\n\r\n  - write the same code to rise up a modal\r\n  - render a partial on it.\r\n  - change an element in a view without reload the entire web page\r\n  - replace content of an element (GET)\r\n  - add an element (POST)\r\n  - remove an element (DELETE)\r\n  - replace an specific element (PUT/PATCH)\r\n  - bind a callback to run specific js function.\r\n\r\nEvery time, we end up with a lot of code, ugly code, messy code or at best with an old and known .js.rb file with the same 4 lines... Well enough it's enough!\r\nThis is the cure...and comes with a simple treatment too!\r\n\r\nSteps:\r\n=\r\n\r\n1. bundle the gem\r\n2. required in your manifest\r\n3. add the 'magic data attributes' to the element\r\n4. enjoy the js-less ! :-)\r\n\r\nThis unobtrusive scripting support file is developed for the Ruby on Rails framework, but is not strictly tied to any specific backend. You can drop this into any application.\r\n\r\nThese features are achieved by adding certain [\"data\" attributes][data] to your HTML markup. In Rails, they are added by the framework's template helpers.\r\n\r\n\r\nRequirements\r\n=\r\n\r\n- [jQuery 1.7.x or higher](http://jquery.com/);\r\n- [jquery_ujs](https://github.com/rails/jquery-ujs)\r\n- [twitter/bootstrap modal.js plugin](http://twitter.github.com/bootstrap/javascript.html#modals) or any .modal()/.modal('toggle') function attached to the jquery element.\r\n- HTML5 doctype (optional).\r\n\r\nIf you don't use HTML5, adding \"data\" attributes to your HTML4 or XHTML pages might make them fail [W3C markup validation][validator]. However, this shouldn't create any issues for web browsers or other user agents.\r\n\r\nInstallation\r\n=\r\n\r\nFor automated installation in Rails, use the \"jquery-rails\" gem. Place this in your Gemfile:\r\n\r\n````ruby\r\n  gem 'SrBuj'\r\n````\r\n\r\nAnd run:\r\n\r\n    $ bundle install\r\n\r\nuse the generator:\r\n\r\n    $ bundle exec rails g sr_buj:install\r\n\r\n\r\nor the manual way:\r\n\r\nFor Rails 3.1 and higher, add `//= require SrBuj` in your `app/assets/javascripts/application.js` file like this:\r\n\r\n```javascript\r\n//= require jquery\r\n//= require jquery_ujs\r\n//= require SrBuj\r\n```\r\n\r\nand add `*= require SrBuj` in your `app/assets/stylesheets/application.css` file:\r\n\r\n```css\r\n /*\r\n *= require_self\r\n *= require SrBuj\r\n *= require_tree .\r\n */\r\n```\r\n\r\nUse and Options\r\n=\r\n\r\n  - `data-target`: Depending on the type of request(`GET`/`PUT`/`POST`/`DELETE`) is used to alter the Dom. it represent the element that we want to alter in the view after an succceded request (needed)\r\n\r\n  - `data-modal`: If you wish that the response ends up in a modal (default: false).\r\n\r\n  - `data-error`: The id element where errors will be rendered if the response received a different state than 200(Ok).\r\n\r\n  - `data-delete`: On a successded response, remove the 'data-target' element from document.\r\n\r\n  - `data-nochange`: Don't alter the Document.(ignore the verb).\r\n\r\n  - `data-callback`: After a succeeded response, call this function.\r\n\r\n  - `data-custom`: Just proxy the response to `data-callback` function. (default: false).\r\n\r\n  - `data-jqueryselector`: Change the `data-target` & `data-error` for selectors in jquery and find the element!\r\n\r\n  - `data-respond-as`: We can alter the respond behavior without careing the method used on the request. values: `GET`/`POST`/`PUT`/`PATCH`/`DELETE`\r\n\r\n  - `data-push`: if there is a href or action in the element, replace the url.(default: false)\r\n\r\nYou can use it with any html element available. (links forms tables divs...Anything).\r\n\r\nExample\r\n=\r\n\r\nmodal\r\n----\r\nin your view (example with a link and haml)\r\n\r\n````haml\r\n = link_to 'add Element', elements_path, remote: true, data: {target: 'partial-id', modal: true}\r\n\r\n\r\n#partial-id\r\n\r\n````\r\n\r\nin your controller\r\n\r\n```` ruby\r\n  def new\r\n    @element= Element.new\r\n    render partial: 'new', content_type: 'text/html' #=> the content_type stands for telling the js request that everything ends up\r\nfine.\r\n  end\r\n````\r\n\r\nthat's it.\r\n\r\nContributing\r\n=\r\n\r\n1. Fork it\r\n2. Create your feature branch (`git checkout -b my-new-feature`)\r\n3. Commit your changes (`git commit -am 'Add some feature'`)\r\n4. Push to the branch (`git push origin my-new-feature`)\r\n5. Create new Pull Request\r\n\r\nCopyright\r\n=\r\n\r\nCopyright (c) 2013 gagoar. See LICENSE.txt for\r\nfurther details.\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}